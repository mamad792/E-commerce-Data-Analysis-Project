/*
The goal of this project is to analyze sales, customer behavior, and product performance for a fictional e-commerce company. 
The project involves working with multiple datasets,  running analytical queries, and generating insights using advanced SQL techniques.
*/

-- CREATE THE TABLE
CREATE TABLE customers (
	customer_id INT PRIMARY KEY,
	first_name VARCHAR(50),
	last_name VARCHAR(50),
	email VARCHAR(100) UNIQUE,
	phone VARCHAR(50),
	address VARCHAR(255),
	city VARCHAR(50),
	state VARCHAR(50),
	country VARCHAR(50),
	postal_code VARCHAR(20),
	registration_date DATE
);


CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    order_date DATE,
    status VARCHAR(20),
    total_amount DECIMAL(10, 2)
);


CREATE TABLE OrderItems (
    order_item_id INT PRIMARY KEY,
    order_id INT REFERENCES Orders(order_id),
    product_id INT,
    quantity INT,
    price DECIMAL(10, 2)
);

CREATE TABLE Categories (
    category_id INT PRIMARY KEY,
    category_name VARCHAR(100)
);

CREATE TABLE Products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(100),
    category_id INT REFERENCES Categories(category_id),
    price DECIMAL(10, 2),
    stock_quantity INT

);


CREATE TABLE Reviews (
    review_id INT PRIMARY KEY,
    product_id INT REFERENCES Products(product_id),
    customer_id INT REFERENCES Customers(customer_id),
    rating INT CHECK (rating BETWEEN 1 AND 5),
    review_text TEXT,
    review_date DATE
);

-- IMPORTING AND REVIEWING OUR COMPLETE DATASET
SELECT * FROM customers;

SELECT * FROM orders;

SELECT * FROM categories;

SELECT * FROM orderitems;

SELECT * FROM products;

SELECT * FROM reviews;


-- EXPLORATORY DATA ANALYSIS

-- What are the top 5 selling products by quantity?

SELECT product_name, SUM(orderitems.quantity) AS number_total_of_order FROM products 
INNER JOIN orderitems ON products.product_id = orderitems.product_id
GROUP BY 1
ORDER BY 2 DESC
LIMIT 5;

-- Calculate the total revenue generated by each product category.

SELECT category_name, SUM(orderitems.price * orderitems.quantity) AS total_revenue  FROM products
INNER JOIN orderitems ON products.product_id = orderitems.product_id
INNER JOIN orders ON orders.order_id = orderitems.order_id
INNER JOIN categories ON categories.category_id = products.category_id
GROUP BY 1
ORDER BY 2 DESC;

-- Identify the top 5 customers based on total purchase amount.

SELECT first_name, last_name, SUM(orderitems.price * orderitems.quantity) FROM customers 
INNER JOIN orders ON orders.customer_id = customers.customer_id
INNER JOIN orderitems ON orders.order_id = orderitems.order_id
GROUP BY 1,2
ORDER BY 3 DESC
LIMIT 5;

-- Analyze monthly sales trends for the last year

SELECT 
EXTRACT(YEAR FROM order_date) AS year, 
EXTRACT(MONTH FROM order_date) AS month,
SUM(total_amount) AS total_sale,
LAG(SUM(total_amount)) OVER (ORDER BY EXTRACT(YEAR FROM order_date), EXTRACT(MONTH FROM order_date)) AS previous_monthly_sale,
ROUND(((SUM(total_amount) - LAG(SUM(total_amount)) OVER (ORDER BY EXTRACT(YEAR FROM order_date), EXTRACT(MONTH FROM order_date))) / NULLIF(LAG(SUM(total_amount)) OVER (ORDER BY EXTRACT(YEAR FROM order_date), EXTRACT(MONTH FROM order_date)), 0)) * 100, 2) AS percentage_change
FROM orders 
WHERE EXTRACT(YEAR FROM order_date) = 2024
GROUP BY 1,2
ORDER BY 1,2;

-- Find the most reviewed products and their average ratings

SELECT product_name, COUNT(*) AS number_of_reviews, ROUND(AVG(rating), 2) AS average_ratings  FROM reviews INNER JOIN products 
ON reviews.product_id = products.product_id
GROUP BY 1
ORDER BY 2 DESC;

-- Find products with sales above the average sales.

SELECT product_name, SUM(orderitems.price * orderitems.quantity) FROM products 
INNER JOIN  orderitems ON products.product_id = orderitems.product_id
INNER JOIN orders ON orders.order_id = orderitems.order_id
GROUP BY 1
HAVING SUM(orderitems.price * orderitems.quantity) > (SELECT ROUND(AVG(total_amount), 2) FROM orders);


-- Find the top 5 best-selling products by revenue

WITH product_revenue AS (
 SELECT *, orderitems.price * orderitems.quantity AS total_sales FROM products 
INNER JOIN  orderitems ON products.product_id = orderitems.product_id
INNER JOIN orders ON orders.order_id = orderitems.order_id 
)

SELECT product_name, SUM(total_sales) AS revenue  FROM product_revenue
GROUP BY 1
ORDER BY 2 DESC
LIMIT 5;

-- Calculate the total sales per product category over the past 6 months.

WITH category_total_sales AS (
    SELECT  
category_name,
EXTRACT(YEAR FROM order_date) AS year,
EXTRACT(MONTH FROM order_date) AS month,
SUM(orderitems.price * orderitems.quantity) AS total_sales
FROM products 
INNER JOIN orderitems ON products.product_id = orderitems.product_id
INNER JOIN orders ON orders.order_id = orderitems.order_id 
INNER JOIN categories ON products.category_id = categories.category_id 
WHERE order_date >= CURRENT_DATE - INTERVAL '6 months'
GROUP BY category_name, year, month
ORDER BY category_name, year, month
)

SELECT category_name, SUM(total_sales) AS total_sales_over_the_past_6_months
FROM category_total_sales
GROUP BY category_name
ORDER BY 2 DESC;


-- Determine the monthly sales trend for the last year, including total sales and number of orders.

WITH monthly_sale_and_orders AS (SELECT
EXTRACT(YEAR FROM order_date) AS year,
EXTRACT(MONTH FROM order_date) AS month,
SUM(total_amount) as total_sales,
CAST (COUNT(*) AS numeric ) as number_of_orders,
LAG(SUM(total_amount)) OVER (PARTITION BY EXTRACT(YEAR FROM order_date) ORDER BY EXTRACT(MONTH FROM order_date)) AS last_month_sale,
LAG (COUNT(*)) OVER (PARTITION BY EXTRACT(YEAR FROM order_date) ORDER BY EXTRACT(MONTH FROM order_date)) AS last_month_number_of_order
FROM orders
WHERE EXTRACT(YEAR FROM order_date) = 2024
GROUP BY 1,2
ORDER BY 1,2)

SELECT *,
ROUND(((total_sales - last_month_sale) /  NULLIF(last_month_sale, 0) ) * 100, 2) AS percentage_change,
ROUND(((number_of_orders - last_month_number_of_order) / NULLIF(last_month_number_of_order, 0) ),2) * 100 AS percentage_change_in_number_of_orders
FROM monthly_sale_and_orders;


-- Identify products with sales above the average sales in their category

WITH product_sale_category AS (
SELECT product_name,category_name, SUM(orderitems.price * orderitems.quantity) AS total_sales,
ROUND (AVG(SUM(total_amount)) OVER(PARTITION BY category_name),2) AS avg_sale_per_cat
FROM products
INNER JOIN orderitems ON products.product_id = orderitems.product_id
INNER JOIN orders ON orders.order_id = orderitems.order_id
INNER JOIN categories ON categories.category_id = products.category_id
GROUP BY 1,2
ORDER BY 2
) 
SELECT product_name, category_name, total_sales FROM product_sale_category
WHERE total_sales > avg_sale_per_cat;

-- Calculate the percentage contribution of each product to the total sales revenue

SELECT 
product_name,
SUM(orderitems.price * orderitems.quantity) AS total_sales,
ROUND((SUM(orderitems.price * orderitems.quantity) / NULLIF((SELECT SUM(total_amount) FROM orders), 0)) * 100, 2) AS percentage_contribution
FROM products 
INNER JOIN orderitems ON products.product_id = orderitems.product_id
INNER JOIN orders ON orders.order_id = orderitems.order_id
GROUP BY product_name;

-- Find the top 10 customers based on total spending.

SELECT customers.customer_id, first_name, last_name, SUM(orderitems.price * orderitems.quantity) AS total_spending
FROM customers
INNER JOIN orders ON customers.customer_id = orders.customer_id
INNER JOIN orderitems ON orders.order_id = orderitems.order_id
GROUP BY 1
ORDER BY 4 DESC
LIMIT 10;

-- Calculate The minimum and maximum value of any single order item for each customer.

SELECT customers.customer_id, first_name, last_name, 
    MIN(orderitems.price * orderitems.quantity) AS min_order_value,
    MAX(orderitems.price * orderitems.quantity) AS max_order_value
FROM customers
INNER JOIN orders ON customers.customer_id = orders.customer_id
INNER JOIN orderitems ON orders.order_id = orderitems.order_id
GROUP BY 1,2,3;



-- Analyze the average order value (AOV) for each customer segment (e.g., high-spending vs. low-spending customers)
-- High-Spending: >= 1000
-- Medium-Spending: 500 - 999
-- Low-Spending: < 500

WITH customer_order_data AS (
SELECT customers.customer_id, 
first_name, 
last_name,
COUNT(DISTINCT orders.order_id) AS total_orders,
SUM(orderitems.price * orderitems.quantity) AS total_spent
FROM customers
INNER JOIN orders ON customers.customer_id = orders.customer_id
INNER JOIN orderitems ON orders.order_id = orderitems.order_id
GROUP BY 1
ORDER BY 1
)
SELECT *, 
ROUND (total_spent / NULLIF (total_orders, 0),2) AS avg_per_order,
CASE 
	WHEN total_spent >= 1000 THEN 'High-Spending'
	WHEN total_spent BETWEEN 500 AND 999 THEN 'Medium-Spending'
    ELSE 'Low-Spending'
END AS spending_segment
FROM customer_order_data
ORDER BY customer_id;


-- Identify inactive customers (customers who haven't placed an order in the last 6 months)

SELECT DISTINCT customers.customer_id, first_name, last_name
FROM customers
LEFT JOIN orders ON customers.customer_id = orders.customer_id
WHERE order_date IS NULL OR order_date < CURRENT_DATE - INTERVAL '6 months'
ORDER BY customer_id ASC;

-- Find the top 5 most reviewed products and their average ratings.

SELECT products.product_id, products.product_name, COUNT(review_id) AS number_of_reviews, ROUND(AVG(rating),2) AS average_ratings
FROM reviews 
INNER JOIN products ON reviews.product_id = products.product_id
GROUP BY 1
ORDER BY 2 DESC
LIMIT 5;

-- Determine the products with the most negative reviews, along with the comments. negative reviews = rating of 1 or 2

SELECT 
products.product_id, 
products.product_name, 
COUNT(reviews.review_id) AS number_of_negative_reviews, 
STRING_AGG(review_text, '; ') AS review_comments
FROM reviews
INNER JOIN products ON products.product_id = reviews.product_id
WHERE rating IN (1, 2)
GROUP BY products.product_id, products.product_name
ORDER BY number_of_negative_reviews DESC
LIMIT 5;

-- Create a stored procedure to calculate the total sales for a specific date range.

CREATE OR REPLACE PROCEDURE CalculateTotalSales(
    IN start_date DATE, 
    IN end_date DATE, 
    OUT total_sales FLOAT
)
LANGUAGE plpgsql 
AS $$
BEGIN
    SELECT 
        SUM(orderitems.quantity * orderitems.price)
    INTO total_sales
    FROM orderitems
    INNER JOIN orders ON orderitems.order_id = orders.order_id
    WHERE orders.order_date BETWEEN start_date AND end_date;
END;
$$;
CALL CalculateTotalSales('2024-03-01', '2024-03-10', NULL);

-- Rank products by total revenue within each category.

SELECT category_name, products.product_name, SUM(orderitems.price * orderitems.quantity) AS total_revenue,
RANK() OVER (PARTITION BY category_name ORDER BY SUM(orderitems.price * orderitems.quantity))
FROM products 
INNER JOIN orderitems ON orderitems.product_id = products.product_id
INNER JOIN categories ON categories.category_id = products.category_id
group by 1,2




